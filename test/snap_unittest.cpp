#include <map>
#include <string>
#include <vector>

#include "snap.h"
#include "gtest/gtest.h"
#include "gmock/gmock.h"

TEST(Program, Default) {
  snap::Program prog(R"ZZZ(Title: CBS News Sunday Morning
Description: Singer Sarah McLachlan; White House conversations secretly recorded by President Richard Nixon; director and screenwriter Richard Linklater; hoarding.
Channel: 3 - KYW
Recorded On: 7/27/2014 9:00:00 AM
Original Air Date: 7/27/2014
Transcript Generated by SnapStream
==================================

Captioning made possible by Johnson & Johnson, where quality products for the American family have been a tradition for generations good morning, I am Charles Osgood and this is Sunday morning. Summertime is the season when countless Americans spend as much time as possible outside the house, and no wonder. All too many of them, the house that they are escaping is a full house. A house so full of stuff there is hardly any room for them. Peter, Rita braver will report our cover story. .. 
>> Has now been diagnosed as a mental disorder, hoarding. >> Up to 5 percent of Americans. 
)ZZZ");
  ASSERT_EQ("CBS News Sunday Morning", prog.title);
  ASSERT_EQ("Singer Sarah McLachlan; White House conversations secretly recorded by President Richard Nixon; director and screenwriter Richard Linklater; hoarding.", prog.description);
  ASSERT_EQ("3 - KYW", prog.channel);
  ASSERT_EQ("2014-07-27", prog.recorded_date);
  ASSERT_EQ("2014-07-27", prog.aired_date);
  ASSERT_EQ("Captioning made possible by Johnson & Johnson, where quality products for the American family have been a tradition for generations good morning, I am Charles Osgood and this is Sunday morning. Summertime is the season when countless Americans spend as much time as possible outside the house, and no wonder. All too many of them, the house that they are escaping is a full house. A house so full of stuff there is hardly any room for them. Peter, Rita braver will report our cover story. .. \n>> Has now been diagnosed as a mental disorder, hoarding. >> Up to 5 percent of Americans.", prog.text);
}

TEST(find, Default) {
  ASSERT_THAT(snap::find("china","china is china is china")["china"],
              ::testing::ElementsAre(0, 9, 18));
  // match whole words only
  ASSERT_THAT(snap::find("china","achina is china is china")["china"],
              ::testing::ElementsAre(10, 19));
  ASSERT_THAT(snap::find("china","china is chinaa is china")["china"],
              ::testing::ElementsAre(0, 19));
  // take into account punctuation
  ASSERT_THAT(snap::find("china","?china is china.")["china"],
              ::testing::ElementsAre(1, 10));  
  // handle search strings with spaces
  ASSERT_THAT(snap::find("united kingdom","i live in the united kingdom")["united kingdom"],
              ::testing::ElementsAre(14));
  ASSERT_THAT(snap::find("united kingdom","i live in the lunited kingdom | united kingdom | united kingdomc | united kingdom.")["united kingdom"],
              ::testing::ElementsAre(32, 67));
  // handle wildcards
  ASSERT_THAT(snap::find("*united kingdom","i live in the lunited kingdom | united kingdom | united kingdomc | united kingdom.")["*united kingdom"],
              ::testing::ElementsAre(15, 32, 67));
  ASSERT_THAT(snap::find("united kingdom*","i live in the lunited kingdom | united kingdom | united kingdomc | united kingdom.")["united kingdom*"],
              ::testing::ElementsAre(32, 49, 67));
  ASSERT_THAT(snap::find("*united kingdom*","i live in the lunited kingdom | united kingdom | united kingdomc | united kingdom.")["*united kingdom*"],
              ::testing::ElementsAre(15, 32, 49, 67));
}

TEST(near, Default) {
  std::map<std::string, std::vector<int>> match_positions;
  std::string pattern1;
  std::string pattern2;
  int distance;
  std::string text;
  

  pattern1 = "china";
  pattern2 = "russia";
  distance = 15;
  text = "there are no matches here";
  ASSERT_EQ(match_positions[pattern1].size(), 0);
  ASSERT_EQ(match_positions[pattern2].size(), 0);
  match_positions = snap::near(pattern1, pattern2, distance, text);
  text = "together are china and russia blah blah blah blah blah china blah blah russia blah";
  match_positions = snap::near(pattern1, pattern2, distance, text);
  ASSERT_THAT(match_positions[pattern1],
              ::testing::ElementsAre(13));
  ASSERT_THAT(match_positions[pattern2],
              ::testing::ElementsAre(23));
  distance = 20;
  match_positions = snap::near(pattern1, pattern2, distance, text);
  ASSERT_THAT(match_positions[pattern1],
              ::testing::ElementsAre(13, 55));
  ASSERT_THAT(match_positions[pattern2],
              ::testing::ElementsAre(23, 71));
}
